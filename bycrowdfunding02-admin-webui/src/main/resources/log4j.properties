# 日志信息的优先级，日志信息的输出目的地，日志信息的输出格式
# 优先级 DEBUG < INFO < WARN < ERROR
log4j.rootLogger=info, stdout
# 日志信息的输出目的地
#org.apache.log4j.ConsoleAppender（控制台），  
#org.apache.log4j.FileAppender（文件），  
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），  
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
# 日志输入到控制台
# 输出目的地
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# 目标
log4j.appender.stdout.Target=System.out
# 什么格式
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# 自定义格式
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#  %m 输出代码中指定的消息
#  %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
#  %r 输出自应用启动到输出该log信息耗费的毫秒数  
#  %c 输出所属的类目，通常就是所在类的全名  
#  %t 输出产生该日志事件的线程名  
#  %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#  %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
#  		比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
#  %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
log4j.logger.com.by.mapper=DEBUG
# 输出到文件 将debug以上级别的日志输出在log.log文件中
#log4j.appender.A = org.apache.log4j.FileAppender
#log4j.appender.A.File = E://logs/log.log
#log4j.appender.A.Append = true
#log4j.appender.A.Threshold = info 
#log4j.appender.A.layout = org.apache.log4j.PatternLayout
#log4j.appender.A.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n



